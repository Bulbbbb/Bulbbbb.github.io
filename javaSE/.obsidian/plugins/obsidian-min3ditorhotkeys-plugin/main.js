'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var Min3ditorHotkeys = /** @class */ (function (_super) {
    __extends(Min3ditorHotkeys, _super);
    function Min3ditorHotkeys() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Min3ditorHotkeys.prototype.onInit = function () { };
    Min3ditorHotkeys.prototype.onload = function () {
        var _this = this;
        console.log("Loading Min3ditorHotkeys plugin");
        /**
         * Add a new line after the current line
         */
        this.addCommand({
            id: "editor-ih-new-line-after",
            name: "Add a new line after the current line",
            callback: function () { return _this.newLine(true); },
            hotkeys: [
                {
                    modifiers: ["Mod", "Shift"],
                    key: "Enter",
                },
            ],
        });
        /**
         * Add a new line before the current line
         */
        this.addCommand({
            id: "editor-ih-new-line-before",
            name: "Add a new line before the current line",
            callback: function () { return _this.newLine(); },
            hotkeys: [
                {
                    modifiers: ["Mod", "Alt"],
                    key: "Enter",
                },
            ],
        });
        /**
         * Duplicate a line or selection
         * Command + D
         */
        this.addCommand({
            id: "editor-ih-duplicate-line",
            name: "Duplicate line or selection",
            callback: function () { return _this.duplicate(); },
            hotkeys: [
                {
                    modifiers: ["Mod"],
                    key: "D",
                },
            ],
        });
    };
    Min3ditorHotkeys.prototype.onunload = function () {
        console.log("Unloading Min3ditorHotkeys plugin");
    };
    Min3ditorHotkeys.prototype.duplicate = function () {
        var activeView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (activeView == null) {
            return;
        }
        var editor = activeView.sourceMode.cmEditor;
        if (editor.somethingSelected()) {
            this.duplicateSelection(editor);
        }
        else {
            this.duplicateLine(editor);
        }
    };
    Min3ditorHotkeys.prototype.duplicateSelection = function (editor) {
        var cursorStart = editor.getCursor("from");
        var cursorEnd = editor.getCursor("to");
        var content = editor.getRange({ line: cursorStart.line, ch: cursorStart.ch }, { line: cursorEnd.line, ch: cursorEnd.ch });
        editor.replaceRange(content, cursorStart, cursorStart);
    };
    Min3ditorHotkeys.prototype.duplicateLine = function (editor) {
        var lineNr = editor.getCursor().line;
        var contents = editor.getDoc().getLine(lineNr);
        var cursorStart = { line: lineNr, ch: 0 };
        var cursorEnd = { line: lineNr, ch: contents.length };
        var content = editor.getRange(cursorStart, cursorEnd) + "\n";
        editor.replaceRange(content, cursorStart, cursorStart);
    };
    /**
     * Create new line before or after the current line
     * @param after true if new line will be created after current line
     */
    Min3ditorHotkeys.prototype.newLine = function (after) {
        if (after === void 0) { after = false; }
        var activeView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (activeView == null) {
            return;
        }
        var editor = activeView.sourceMode.cmEditor;
        var offset = (after ? 1 : 0);
        var cursorStart = {
            line: editor.getCursor().line + offset,
            ch: 0,
        };
        editor.replaceRange("\n", cursorStart, cursorStart);
        editor.setCursor(cursorStart);
    };
    return Min3ditorHotkeys;
}(obsidian.Plugin));

module.exports = Min3ditorHotkeys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
