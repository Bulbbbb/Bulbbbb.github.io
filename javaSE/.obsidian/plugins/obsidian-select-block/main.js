/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default",
  selectAll: true
};
var MyPlugin = class extends import_obsidian.Plugin {
  select() {
    var activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    var editor = activeView.sourceMode.cmEditor;
    this._select(editor);
  }
  _select(editor) {
    var lineNr = editor.getCursor().line;
    var contents = editor.getDoc().getLine(lineNr);

    if (contents.search(/>\s+[0-9]\.\s+/i) == 0) {
      var ch_start = contents.search(/[^>\s0-9\.]/i);
    } else if (contents.search(/\s+[0-9]\.\s+/i) == 0) {
      var ch_start = contents.search(/[^\s0-9\.]/i);
    } 

    else if (contents.search(/>\s*\+\s*/i) == 0) {
      var ch_start = contents.search(/[^>\s*\+]/i);
    }
    else if (contents.search(/>\s*/i) == 0) {
      var ch_start = contents.search(/[^>\s]/i);
    } 
    
    else if (contents.search(/[0-9]\.\s+/i) == 0) {
      var ch_start = contents.search(/[^\s0-9\.]/i);
    } else if (contents.search(/\+\s+/i) == 0) {
      var ch_start = contents.search(/[^\+\s]/i);
    } else if (contents.search(/\s+\+\s+/i) == 0) {
      var ch_start = contents.search(/[^\+\s]/i);
    } else if (contents.search(/\s+\-\s+/i) == 0) {
      var ch_start = contents.search(/[^\-\s]/i);
    } else if (contents.search(/\-\s+/i) == 0) {
      var ch_start = contents.search(/[^\-\s]/i);
    } else {
      var ch_start = contents.search(/[^\s]/i);
    }
    if (contents.search(/>\s*\[\![a-z]+\]\s+/i) == 0) {
      var _start = contents.indexOf(']');
      var cc = contents.slice(_start);
      var ch_start = cc.search(/[^\]\s]/i) + _start;
    }
    if (contents.search(/>\s*\[\![a-z]+\]\+\s+/i) == 0) {
      var _start = contents.indexOf(']');
      var cc = contents.slice(_start);
      var ch_start = cc.search(/[^\]\+\s]/i) + _start;
    }
    if (contents.search(/>\s*\[\![a-z]+\]\-\s+/i) == 0) {
      var _start = contents.indexOf(']');
      var cc = contents.slice(_start);
      var ch_start = cc.search(/[^\]\-\s]/i) + _start;
    }
    if(contents.search(/#+\s+/i)==0){
      var ch_start = contents.search(/[^#\s]/i);
    }
    let cursorStart = { line: lineNr, ch: ch_start };
    let cursorEnd = { line: lineNr, ch: contents.length };
    let content = editor.getRange(cursorStart, cursorEnd) + "\n";
    editor.setSelection(cursorStart, cursorEnd);
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "select-block",
      name: "\u9009\u62E9\u4E00\u4E2Ablock",
      callback: () => this.select(),
      hotkeys: [
        {
          modifiers: ["Mod"],
          key: "A"
        }
      ]
    });
  }
  onunload() {
    console.log("unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
